// Code generated by counterfeiter. DO NOT EDIT.
package execfakes

import (
	"io"
	"sync"

	"github.com/cf-platform-eng/mrlog/exec"
)

type FakeCmd struct {
	RunStub        func() error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
	}
	runReturns struct {
		result1 error
	}
	runReturnsOnCall map[int]struct {
		result1 error
	}
	SetOutputStub        func(io.Writer)
	setOutputMutex       sync.RWMutex
	setOutputArgsForCall []struct {
		arg1 io.Writer
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCmd) Run() error {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
	}{})
	fake.recordInvocation("Run", []interface{}{})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.runReturns
	return fakeReturns.result1
}

func (fake *FakeCmd) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeCmd) RunCalls(stub func() error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeCmd) RunReturns(result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmd) RunReturnsOnCall(i int, result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmd) SetOutput(arg1 io.Writer) {
	fake.setOutputMutex.Lock()
	fake.setOutputArgsForCall = append(fake.setOutputArgsForCall, struct {
		arg1 io.Writer
	}{arg1})
	fake.recordInvocation("SetOutput", []interface{}{arg1})
	fake.setOutputMutex.Unlock()
	if fake.SetOutputStub != nil {
		fake.SetOutputStub(arg1)
	}
}

func (fake *FakeCmd) SetOutputCallCount() int {
	fake.setOutputMutex.RLock()
	defer fake.setOutputMutex.RUnlock()
	return len(fake.setOutputArgsForCall)
}

func (fake *FakeCmd) SetOutputCalls(stub func(io.Writer)) {
	fake.setOutputMutex.Lock()
	defer fake.setOutputMutex.Unlock()
	fake.SetOutputStub = stub
}

func (fake *FakeCmd) SetOutputArgsForCall(i int) io.Writer {
	fake.setOutputMutex.RLock()
	defer fake.setOutputMutex.RUnlock()
	argsForCall := fake.setOutputArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmd) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.setOutputMutex.RLock()
	defer fake.setOutputMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCmd) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ exec.Cmd = new(FakeCmd)
